\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename lookup.info
@settitle Lookup User's Manual


@c Version and Contact Info
@set AUTHOR Nishida Keisuke (Updated by KAWABATA Taichi)

@c
@documentencoding UTF-8
@c
@c Use proper quote and backtick for code sections in PDF output
@set txicodequoteundirected
@set txicodequotebacktick
@c
@c Version and Contact Info
@set MAINTAINERSITE @uref{http://lookup2.github.com/ webpage}
@set MAINTAINER Kawabata Taichi
@set MAINTAINEREMAIL @email{kawabata dot taichi at gmail dot com}
@c %**end of header
@finalout


@copying
@end copying


@dircategory Emacs application
@direntry
* Lookup: (lookup).             Outline-based notes management and organizer
@end direntry


@titlepage
@title Lookup User's Manual

@subtitle Release @value{VERSION}
@author Nishida Keisuke (Updated by KAWABATA Taichi)

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top Lookup User's Manual Manual
@insertcopying
@end ifnottex

@menu
* Introduction::                
* Search Agents::               
* Dictionaries::                
* Queries::                     
* Entries::                     
* Contents::                    
* Modules::                     
* List of Search Agents::       
* List of Supported Dictionaries::  
* Making new Search Agents::    
* Making new Support Files::    
* List of Sample Dictionries::  
* Concept index::               
* Key index::                   
* Command and function index::  
* Variable index::              

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Summary::                     
* Installation::                
* Setup::                       
* Startup::                     
* Search::                      
* View::                        

Search Agents

* Agent Options::               

Dictionaries

* Dictionary Options::          

Queries

* Query by pattern::            
* Query by word::               
* Query Filters::               

Query Filters

* Mecab::                       
* English Stemmer::             

Contents

* Contents Arrangements::       

List of Search Agents

* ndeb::                        
* ndtext::                      
* ndsary::                      
* ndlatin::                     
* ndic::                        
* ndict::                       
* ndjitsuu::                    
* ndsrd::                       
* ndest::                       
* ndmecab::                     
* ndbtonic::                    
* ndspell::                     
* ndcookie::                    

ndtext

* ndtext summary::              

ndbtonic

* Usage::                       

List of Supported Dictionaries

* EPWING/EBXA dictionaries::    
* SDIC Dictionary::             
* RangJung Yeshe Dicitionary::  

EPWING/EBXA dictionaries

* FPWBooks::                    
* EPWING for classics::         
* LDOCE5-FPW::                  

@end detailmenu
@end menu




@node Introduction
@chapter Introduction

@menu
* Summary::                     
* Installation::                
* Setup::                       
* Startup::                     
* Search::                      
* View::                        
@end menu

@node Summary
@section Summary
Lookup is a searching tool for various dictionaries and external
resources.  Typical dictionaries supported by this program includes
the followings:

@itemize
@item 
Text-based dictionaries
(Use of Suffix Array tool (sary) for better performance is also supported)

@item 
EPWING dictionaries

@item 
Search Engines (Spotlight, Hyperestraier)

@item 
Web Search Engines (OpenSearch)

@item 
Spell Checking

@item 
Scanned Paper Dictionaries (index text is needed.)

@item 
Text-based dictionaries
(Use of Suffix Array tool (sary) for better performance is also supported)

@item 
EPWING dictionaries

@item 
Search Engines (Spotlight, Hyperestraier)

@item 
Web Search Engines (OpenSearch)

@item 
Spell Checking

@item 
Scanned Paper Dictionaries (index text is needed.)

@end itemize

@node Installation
@section Installation
If you clone or download the archive from github, you will have to
follow the following procedure to install Lookup program.

@verbatim
% ./configure --with-emacs=emacs
              --with-lispdir=/your/home/emacs/lisp
              --infodir=/your/home/emacs/info
% make install
@end verbatim

@node Setup
@section Setup
You will need some dictionaries that Lookup @ref{Search Agents,}
supports.  For on-line available dictionaries, see @ref{List of Sample Dictionries,}.  When you install the dictionaries, you need to
specify @ref{Search Agents,} with their locations.  For example:

@lisp
(setq lookup-search-agents '((ndeb "~/path/to/dict_dir_1/")
                             (ndeb "~/path/to/dict_dir_2/")))
@end lisp

Here, @code{ndeb} is a @strong{search agent}, and @code{/path/to/dict_dir_1/} is a
location of a dictionaries.  Remember that you will need @code{eblook}
program @footnote{It is included in various package managers, such as @code{MacPorts}.} to use this agent.

Additionaly, you might want to set as follows, or you might just
@code{(require 'lookup)} instead of autoloading the library.

@lisp
(autoload 'lookup "lookup" nil t)
(autoload 'lookup-region "lookup" nil t)
(autoload 'lookup-word "lookup" nil t)
(autoload 'lookup-select-dictionaries "lookup" nil t)

(define-key ctl-x-map "l" 'lookup)              ; C-x l - lookup
(define-key ctl-x-map "y" 'lookup-region)       ; C-x y - lookup-region
(define-key ctl-x-map "\C-y" 'lookup-pattern)   ; C-x C-y - lookup-pattern
@end lisp

You may write your settings to
~/.emacs.d/lookup/init.el.  It is recommended to write
all lookup settings to this file, except for autoloadings and key
bindings settings.

@node Startup
@section Startup

After you set up the dictionary, type @code{M-x lookup} to start lookup.
You will typically see the following sceen.


@verbatim
======== Lookup Windows ==================================================
--------------------------------------------------------------------------

Lookup (module: default)
Tyep `m' to select, `u' to unselect, `q' to leave, `?' for help.

% Dictionary ID                   Title                        Methods
- -------------                   -----                        -------
* ndeb:~/edicts/OXFORD/oxford     Oxford Dictionary/Thesaurus  =><.......
* ndeb:~/edicts/OXFORD/quick      Quick Tour                   .........M
* ndeb:~/edicts/OXFORD/user       User's Guide                 =><......M
* ndeb:~/edicts/OXFORD/about      About This Disc              .........M
* ndtext:~/edicts/sdic/edict.sdic EDict                        =><-......
* ndtext:~/edicts/sdic/gene.sdic  Gene95                       =><-......

---------------------------------------------------------------------------
-J:%*  Lookup: *Dictionary List*      (Select Abbrev)--L5--C0--A
---------------------------------------------------------------------------
===========================================================================
@end verbatim



This is a list of dictionaries you can lookup.  @emph{Dictionary ID}
consists of @strong{Agent ID} + "@code{:}" + @strong{agent location}.  @emph{Methods} shows
which methods are supported in each dictionary.  For example,
@code{=><.....} means that this dictionary supports @strong{exact}, @strong{prefix}
and @strong{suffix} search methods.



This displays 

@node Search
@section Search

Try typing @code{M-x lookup-pattern} and you will be prompted for
patterns to search.

@node View
@section View

@node Search Agents
@chapter Search Agents
@emph{Search Agents} will search specific format of dictionaries in
specified @strong{location}.  For historical reason, typical search agents
has the name which begins from @verb{~nd~} (e.g. @verb{~ndeb~}, @verb{~ndict~}, @verb{~ndtext~},
etc.)

You can specify the search agents by @code{lookup-search-agents} variable.


@table @samp
@item @code{lookup-search-agents}
This variable specifies the search
agents to be used.  It is a list of @code{(class location options)}.

@end table

For example, 

@lisp
(ndtp "dserver" :port 2010 :account "user@@domain")
@end lisp

specifies that class is @code{ndtp}, location is @code{dserver} and options
are @code{:port} and @code{account}, whose values are @code{2010} and @code{user@@domain}
respectively.


@menu
* Agent Options::               
@end menu

@node Agent Options
@section Agent Options

@node Dictionaries
@chapter Dictionaries
@emph{Dictionaries} are entities that explain the meaning of specified
word or pattern.  @emph{Search Agents} will look for @emph{dictionaries}, and
user can not specify them directly.


@menu
* Dictionary Options::          
@end menu

@node Dictionary Options
@section Dictionary Options
You can not directy specify the options to dictionaries, as
dictionaries are indirectly specifed by searc agents.  You may
specify dictionary options via @emph{support-files}.

Followings are dictionary options, which can be specified by
support files.

@table @samp
@item :title
Dictionary title.

@item :charsets
Charsets that dictionary supports.  Queries whose
string do not belong to specified charsets are not
searched.

@item :query-filter
See @ref{Query Filters,} for details

@item :arranges
This option will specify the @emph{additional} arrange
functions besides the default arrange functions.

@item :arrange-table
This option will specify the @emph{overrinding}
arrange functions besides the default arrange
functions.

@end table

@node Queries
@chapter Queries
Queries


@menu
* Query by pattern::            
* Query by word::               
* Query Filters::               
@end menu

@node Query by pattern
@section Query by pattern
You can query by patterns, such as "testi*" etc.
@itemize
@item 
lookup-pattern

@end itemize

@itemize
@item 
lookup-pattern-full-screen

@end itemize

@itemize
@item 
lookup-pattern-other-frame

@end itemize

@node Query by word
@section Query by word
This command will look for the word around the cursor.
@itemize
@item 
lookup-word

@end itemize

@itemize
@item 
lookup-word-full-screen

@end itemize

@itemize
@item 
lookup-word-other-frame

@end itemize

@node Query Filters
@section Query Filters
@strong{Query Filters} are filters that will convert

If you have convenient morphological analyzer (word normalizer and
extractor), you can specify it to extract the appropriate word
around the point.


@menu
* Mecab::                       
* English Stemmer::             
@end menu

@node Mecab
@subsection Mecab
You may use mecab to search for agents.  Please make sure that
your dictinaries encoding (UTF-8 is strongly recommended) and
@verb{~lookup-mecab-coding~} are the same.
You may use this For dictionary which only supports Hiragana Entries,

@node English Stemmer
@subsection English Stemmer
@emph{English stemmer} is a function to stem an English word.  It is
realized via emacs lisp program @code{stem-english.el}.

@node Entries
@chapter Entries
Once you query for the words, search agents will return @emph{entries} if
they are found.  @emph{Entries} will be displayed in @emph{Entries buffer}.

@node Contents
@chapter Contents
@emph{Contents} of entries will be displaeyd in @code{*Contents*} buffer.
Before they are displayed on buffer, they may be @emph{arranged}
according to @code{arrange-tables}.


@menu
* Contents Arrangements::       
@end menu

@node Contents Arrangements
@section Contents Arrangements
Arrangements are processed in the following order.
@itemize
@item 
Gaiji Replacements

@end itemize

@node Modules
@chapter Modules
@emph{Modules} are a set of dictionaries for searching.

@node List of Search Agents
@chapter List of Search Agents

@menu
* ndeb::                        
* ndtext::                      
* ndsary::                      
* ndlatin::                     
* ndic::                        
* ndict::                       
* ndjitsuu::                    
* ndsrd::                       
* ndest::                       
* ndmecab::                     
* ndbtonic::                    
* ndspell::                     
* ndcookie::                    
@end menu

@node ndeb
@section ndeb
@code{ndeb} is a search agent for EPWING/EBXA dictionaries.  You will
need @code{eblook} program to use this agent.  Typical specification of
this dictionary is as follows.  You need to add the directory where
the @code{HONMON} file exists to @code{lookup-search-agents}.
@lisp
(setq lookup-search-agents
      '(...
        (ndeb "/path/to/directory/")
        ...))
@end lisp

@node ndtext
@section ndtext

@menu
* ndtext summary::              
@end menu

@node ndtext summary
@subsection Summary
@code{ndtext} agent lets you access medium-sized (less than 10Mbyte)
text-based dictionary by `GNU grep'.  It utilizes the multi-line
search feature of GNU grep to search structured document.

@node ndsary
@section ndsary
@code{ndsary} will search for text with help of Suffix Array utility
(@uref{http://sary.sourceforge.net/,sary}).

@node ndlatin
@section ndlatin
@verb{~ndlatin~} is a search agent that lets you access @emph{WORDS for Latin}
by William Whitaker.  Requirements varies on various computers.

If you are using @emph{MacOS X}, @emph{WORD for Latin} is included in
Open-Source software called @emph{Interpres.app}
(@uref{https://sites.google.com/site/erikandremendoza/}).  After the
installation of Interpres, add the following line in your set-up
file.  (Make sure that file does exist there and is executable.)
@lisp
(setq ndlatin-program "/Applications/Interpres.app/Contents/Resources/words")
@end lisp

If you are using Windows or Linux, you may find the program via
Wikipedia (@uref{http://en.wikipedia.org/wiki/William_Whitaker%27s_Words})
page.

After you set the @verb{~ndlatin-program~} properly, just add @verb{~(ndlatin)~}
to your @verb{~lookup-search-agents~} variable.

@node ndic
@section ndic
@code{ndic} is a search agent that lets you access @code{dic} format
dictionaries.

@node ndict
@section ndict
@code{ndic} is a search agent @code{DICT} server.  DICT protocols is
specified by @uref{http://tools.ietf.org/html/rfc2229,RFC2229}.

@node ndjitsuu
@section ndjitsuu
@code{ndjitsuu} is a search agent for Jitsuu dictionary.  You will need
to prepare the index file equipped in this archive to create the
dictionary.

@node ndsrd
@section ndsrd
@verb{~ndsrd~} is an agent for "Shōgakukan Random House Dictionary".  To
use this agent, you must install @verb{~csrd~}.
(@uref{http://openlab.ring.gr.jp/edict/csrd/}).  There is a bug in @verb{~csrd~}
program, which can be fixed by @verb{~csrd.c.diff.gz~}.

To use this search agent, you will need to install the @verb{~csrd~} program.
@example
cd csrd-1.0/
zcat ../csrd.c.diff.gz | patch -p0 (optional)
make -f makefile.unx
sudo mv csrd /usr/local/bin/

@end example
Then, add the following agent to your @verb{~lookup-search-agents~}.
@lisp
(setq lookup-search-agents
      '(...
        (ndsrd "/path/to/directory/")
        ...))
@end lisp
Refer the following URL for more details on this dictionary.
@table @samp
@item Shōgakukan Random House Dictionary
@uref{http://www.shogakukan.co.jp/books/detail/_isbn_4099068579}

@item csrd
@uref{http://openlab.ring.gr.jp/edict/csrd}

@item csrd patch
@uref{http://ikazuhiro.s206.xrea.com/filemgmt/index.php?id=10}

@end table

@node ndest
@section ndest
@code{ndest} search agent for
@uref{http://fallabs.com/hyperestraier/,HyperEstraier} Full-Text
Search engine.

@node ndmecab
@section ndmecab
@code{ndmecab} is a search agent for
@uref{http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html,mecab}
program.

@node ndbtonic
@section ndbtonic
@code{ndbtonic} search agents support BTONIC format dictionaries.  To
use this agent, you must install
@uref{http://sary.sourceforge.net/,sary} program and
@uref{http://hp.vector.co.jp/authors/VA005784/btonic/btonic2xml.html,BTONIC2xml.rb
v1.10} utility.


@menu
* Usage::                       
@end menu

@node Usage
@subsection Usage
You need to convert original BTONIC data to XML data and create
suffix array index as follows.
@verbatim
% ruby -Ks BTONIC2xml.rb <dictName> <outDir>
% cd <outDir>
% mksary -c shift_jis <outFile>.xml
@end verbatim
Then put the agent into @code{lookup-search-agents} as follows.
@lisp
(setq lookup-search-agents
      '(...
        (ndbtonic "/path/to/directory/")
        ...))
@end lisp

@node ndspell
@section ndspell
@code{ndspell} let you search ambiguous spell.  You need either @code{ispell}
or @code{aspell} program to use this agent.

@node ndcookie
@section ndcookie
@code{ndcookie} is an fun agent which will randomly displays cookie
data.  To use this agent, you need to specify Emacs @code{etc} directory
where @code{COOKIES} file exists.
@lisp
(setq lookup-search-agents
      '(...
        (ndcookie "/path/to/emacs/etc/")
        ...))
@end lisp

@node List of Supported Dictionaries
@appendix List of Supported Dictionaries
This appendix contains various free and non-free dictionaries
supported by @emph{Lookup}, and also the @emph{support-files} that provides
dictionary options for some specific dictionaries.


@menu
* EPWING/EBXA dictionaries::    
* SDIC Dictionary::             
* RangJung Yeshe Dicitionary::  
@end menu

@node EPWING/EBXA dictionaries
@section EPWING/EBXA dictionaries
EPWING is a dictionary format specified as JIS X 4081.  There have
been a wide variety of commercial
@uref{http://ja.wikipedia.org/wiki/EPWING,EPWING} Dictionaries
available on the market.  However, most of them are discontinued.
EBXA is also a dictionary format which is a predecessor of EPWING
Format.


@menu
* FPWBooks::                    
* EPWING for classics::         
* LDOCE5-FPW::                  
@end menu

@node FPWBooks
@subsection FPWBooks
@uref{http://openlab.ring.gr.jp/edict/fpw/,FPWBooks} are the EPWING
dictionaries created by
@ref{FREEPWING,,@uref{http://www.sra.co.jp/people/m-kasahr/freepwing/}}.

@node EPWING for classics
@subsection EPWING for classics
@uref{http://classicalepwing.sourceforge.jp/,EPWING for classics}
are a collection of dictionaries for classical Latin, Greek and
Sanskrit.

@node LDOCE5-FPW
@subsection LDOCE5-FPW
@uref{http://www.geocities.jp/taka_depo/,LDOCE5-FPW} is a tool to
convert LDOCE5 DVD Dictionary to EPWING format.

@node SDIC Dictionary
@section SDIC Dictionary
@code{support-sdic.el} provides support for
@uref{http://www.namazu.org/~tsuchiya/sdic/index.html,SDIC}
dictionaries.  It should be used with @code{ndsary}, @code{ndbuffer}, or
@code{ndtext} agent.

@node RangJung Yeshe Dicitionary
@section RangJung Yeshe Dicitionary

@node Making new Search Agents
@appendix Making new Search Agents
This section is to be written in future.

@node Making new Support Files
@appendix Making new Support Files
This section is to be written in future.

@node List of Sample Dictionries
@appendix List of Sample Dictionries
This chapter describes some major Open-Source dictionaries that may be used with Lookup

@node Concept index
@unnumbered Concept index


@printindex cp

@node Key index
@unnumbered Key index


@printindex ky

@node Command and function index
@unnumbered Command and function index


@printindex fn

@node Variable index
@unnumbered Variable index


@printindex vr

@c Generated by Org mode 7.9.3f in Emacs 24.2.92.1.

@bye